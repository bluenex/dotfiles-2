#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Run sdkmanager to install necessary sdk for android dev

sdk_setup_first_time() {

  echo "Installing 'platforms;android-27'..."
  sdkmanager "platforms;android-27"

  echo "Installing 'build-tools;27.0.3'..."
  sdkmanager "build-tools;27.0.3"

  echo "Installing 'extras;android;m2repository'..."
  sdkmanager "extras;android;m2repository"

  echo "Installing 'extras;google;m2repository'..."
  sdkmanager "extras;google;m2repository"

  echo "Installing 'sources;android-27'..."
  sdkmanager "sources;android-27"

}

switch_java_home() {

  if echo ${JAVA_HOME} | grep '1.8' > /dev/null;
  then
    # if 1.8 is being exported
    export JAVA_HOME=$(/usr/libexec/java_home)
    echo "JAVA_HOME is changed to '$(/usr/libexec/java_home)'"
  else
    # if 10 is being exported
    export JAVA_HOME=$(/usr/libexec/java_home -v1.8)
    echo "JAVA_HOME is changed to '$(/usr/libexec/java_home -v1.8)'"
  fi


}

add_to_path_start() {

  case ":$PATH:" in
    *":$1:"*) :;; # already there
    *) export PATH="$1:$PATH";; # or PATH="$PATH:$1"
  esac

}

add_to_path_end() {

  case ":$PATH:" in
    *":$1:"*) :;; # already there
    *) export PATH="$PATH:$1";; # or PATH="$PATH:$1"
  esac

}

getBranchName() {
  local bName

  bName=$("pbpaste" | sed -nE 's|.*/c/(.*)">.*</a>.*|\1|p')
  echo "$bName" | pbcopy;

  echo "$bName"
}

findBranch() {
  git branch | grep "$1"
}

# youtube-dl add-on
## due to certification error, this alias is to bypass

chk-ytdl-dir() {
if [ ! -d ~/Music/youtube-dl ]; then
  mkdir ~/Music/youtube-dl
  echo "created ~/Music/youtube-dl"
  mkdir ~/Music/youtube-dl/videos
  echo "created ~/Music/youtube-dl/videos"
fi
}

ytdl() {
  ## checking
  testlen=$1
  if [[ $# -gt 2 ]]; then
    echo "Only 2 arguments are allowed!"
    return 1
  fi
  if [[ ${#testlen} -gt 4 ]]; then
    echo "Maximum length of option is 4.. (-sph or -vph)"
    return 1
  fi
  if [[ $1 == *"s"* && $1 == *"v"* ]]; then
    echo "Could not download both song and video at once!"
    return 1
  fi

  ## downloading
  chk-ytdl-dir
  curdir="$PWD"
  if [[ $1 != *"h"* ]]; then
    cd ~/Music/youtube-dl/
  else
    echo "Download to current path.."
  fi
  if [[ $1 == *"s"* ]]; then
    echo "Downloading song.."
    if [[ $1 == *"p"* ]]; then
      echo "With proxy.."
      youtube-dl -o "%(title)s.%(ext)s" -f "m4a" --proxy "" --no-check-certificate $2
    else
      youtube-dl -o "%(title)s.%(ext)s" -f "bestaudio" --no-check-certificate $2
    fi
  elif [[ $1 == *"v"* ]]; then
    cd ~/Music/youtube-dl/videos
    echo "Downloading video.."
    if [[ $1 == *"p"* ]]; then
      echo "With proxy.."
      youtube-dl -o "%(title)s.%(ext)s" -f "best" --proxy "" --no-check-certificate $2
    else
      youtube-dl -o "%(title)s.%(ext)s" -f "best" --no-check-certificate $2
    fi
  else
    echo "No satisfied parameters filled.."
    echo "Please use -s for song, -v for video, -p if proxy and -h to save to current path."
  fi
  cd $curdir
}

chk-dup-song() {
  fdupes -r -d ~/Music/youtube-dl/
}
